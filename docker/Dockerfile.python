FROM ubuntu:ubuntu_base_20.04 as build-base

ARG PYTHON_VERSION

# Install python and its dependent packages
RUN apt-get update && \
    apt-get install -y --no-install-recommends sudo curl vim unzip ssh iputils-ping && \
    apt-get install -y software-properties-common && \
    apt-add-repository ppa:deadsnakes/ppa && \
    apt-get install python${PYTHON_VERSION} -y && apt install python3-pip -y && \
    apt-get install python3-dev python3-venv && \
    pip3 install --upgrade pip && \
    pip3 install flake8 && \
    pip3 install jupyter && pip3 install jupyterlab && \
    mkdir /usr/local/notebooks && \
    apt-get clean

# Install any Python modules required in the notebook
RUN pip3 install pandas && pip3 install numpy && \ 
    pip3 install python-dotenv && \
    pip3 install pathlib && \
    pip3 install utils

# Install Python libraries
COPY requirements.txt .
RUN pip install -r requirements.txt --no-cache-dir


FROM build-base as pyspark

ARG SPARK_VERSION
ARG JAVA_VERSION

RUN apt-get install -y --no-install-recommends openjdk-${JAVA_VERSION}-jdk && \
    apt-get clean

RUN pip3 install pyspark

# https://spark.apache.org/downloads.html
RUN mkdir -p /opt && \
    cd /opt && \
    curl http://dlcdn.apache.org/spark/spark-${SPARK_VERSION}/spark-${SPARK_VERSION}-bin-hadoop3.tgz | tar -zx && \
    ln -s spark-${SPARK_VERSION}-bin-hadoop3 spark && echo Spark ${SPARK_VERSION} installed in /opt

# Set PATHs
ENV SPARK_HOME /opt/spark
ENV PATH $PATH:$SPARK_HOME/bin:$SPARK_HOME/sbin
RUN export HADOOP_OPTS="$HADOOP_OPTS -Djava.library.path=$HADOOP_HOME/lib/native"
ENV JAVA HOME="/usr/lib/jvm/java-${JAVA_VERSION}-openjdk-amd64"
RUN export PATH=$PATH:$SPARKHOME/bin
RUN export PYTHONPATH=$SPARK_HOME/python:$PYTHONPATH
RUN export PYSPARK_PYTHON=python3
RUN export PATH=$PATH:$JAVA_HOME/bin

# Adds custom log4j.properties to Spark conf/
COPY log4j.properties /opt/spark/conf/


FROM pyspark as neo4j

COPY lib/neo4j-connector-apache-spark_*.jar /opt/spark/jars/


FROM neo4j as final

# Set PATHs
RUN export PYTHON=python3

RUN groupadd --gid 1000 app && \
    useradd --uid 1000 --gid 1000 -d /app -m -s /bin/bash app && \
    chown -R app:app /app
USER app
WORKDIR /app
